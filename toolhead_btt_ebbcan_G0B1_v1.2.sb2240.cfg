## BOARD PINS
[board_pins EBB_SB2240_G0B1_v1.2] 
mcu: can0
aliases:
aliases_step:
    EXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_CS=PA15,EXT_SCLK=PB10,EXT_MOSI=PB11,EXT_MISO=PB2
aliases_limitsw: # these are preferred for endstops (including klicky)
    LIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6
aliases_probe:
    PROBE_TOUCH=PB5
aliases_fans:
    FAN0=PA1,FAN1=PA0
aliases_thermistors:
    TH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7
aliases_heaters:
    HE0=PB13
aliases_rgb:
    RGBLED=PD3
# aliases_adxl:
#     ADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11
aliases_i2c:
    AUX0=PB3,AUX1=PB4

## can0
[mcu can0]
canbus_uuid: dafd44d1c57c # run the following command to locate the uuid >   ~/klippy-env/bin/python ~/klipper/scripts/canbus_query.py can0

## can0
[temperature_sensor CANBOARD]
sensor_type: temperature_mcu
sensor_mcu: can0

## HOT END FAN
[heater_fan hotend_fan]
##  Hotend Fan - FAN1
pin: can0:FAN1
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0

## PART COOLING
[fan]
pin: can0:FAN0
kick_start_time: 0.25
cycle_time: 0.15
off_below: 0.10

# [fan_generic fantest0]
# pin: can0:FAN0
# kick_start_time: 0.25
# cycle_time: 0.15
# off_below: 0.10

# [fan_generic fantest1]
# pin: can0:FAN1
# kick_start_time: 0.25
# cycle_time: 0.15
# off_below: 0.10


## EXTRUDER 
[extruder]
step_pin: can0:EXT_STEP
dir_pin: can0:EXT_DIR
enable_pin: !can0:EXT_EN
# rotation_distance: 22.67895 #for 5mm Shaft Driven Bondtech gearsets
rotation_distance: 22.112394449838
gear_ratio: 50:10
microsteps: 16
full_steps_per_rotation: 200 #1.8deg Motor
max_extrude_only_distance: 1400.0
max_extrude_only_velocity: 75.0
max_extrude_only_accel: 1500
max_extrude_cross_section: 5
nozzle_diameter: 0.400
filament_diameter: 1.750
pressure_advance: 0.024 # pla 0.044, polymaker ASA 0.024
heater_pin: can0:HE0
sensor_pin: can0:TH0
sensor_type: ATC Semitec 104GT-2  # this is the default for the Revo heater
#pullup_resistor: 2200            # 4700 is default and does not need defining, 2200 is used for the PT1000             
# control: pid
# pid_Kp: 22.2
# pid_Ki: 1.08
# pid_Kd: 114
# sensor_type: Generic 3950
# pid_Kp: 19.937 
# pid_Ki: 0.826 
# pid_Kd: 120.368
min_temp: -50
max_temp: 350

pwm_cycle_time: 0.02
smooth_time: 0.5
max_power: 0.8


## EXTRUDER MOTOR
[tmc2240 extruder]
cs_pin: can0:EXT_CS
spi_software_sclk_pin: can0:EXT_SCLK
spi_software_mosi_pin: can0:EXT_MOSI
spi_software_miso_pin: can0:EXT_MISO
# stealthchop_threshold: 0
# run_current: 0.30
run_current: 0.60
stealthchop_threshold: 999999

interpolate: False

driver_IHOLDDELAY: 8
driver_IRUNDELAY: 2
#driver_TPOWERDOWN: 10
driver_TBL: 3
driver_TOFF: 4
driver_HEND: 3
driver_HSTRT: 4
#driver_FD3: 0
driver_TPFD: 0
##driver_CHM: 0
##driver_VHIGHFS: 0
##driver_VHIGHCHM: 0
##driver_DISS2G: 0
##driver_DISS2VS: 1
driver_PWM_AUTOSCALE: True
driver_PWM_AUTOGRAD: True
#driver_PWM_FREQ: 2
##driver_FREEWHEEL: 0
driver_PWM_GRAD: 12
driver_PWM_OFS: 40
driver_PWM_REG: 15
driver_PWM_LIM: 12
driver_SGT: 30
driver_SEMIN: 2
#driver_SEUP: 3
driver_SEMAX: 8
#driver_SEDN: 2
#driver_SEIMIN: 0
#driver_SFILT: 1
#driver_SG4_ANGLE_OFFSET: 1
#   Set the given register during the configuration of the TMC2240
#   chip. This may be used to set custom motor parameters. The
#   defaults for

# [gcode_macro configure_extruder]
[delayed_gcode configure_extruder]
initial_duration: 0.5
gcode:
  # Enable accurate stall current measurement
  SET_TMC_FIELD STEPPER=extruder FIELD=pwm_meas_sd_enable VALUE=1
  SET_TMC_FIELD STEPPER=extruder FIELD=sg4_filt_en VALUE=1
  # Set the StealthChop stall detection threshold (may not be completely necessary)
  SET_TMC_FIELD STEPPER=extruder FIELD=SG4_THRS VALUE=10
  # Set the hold current to zero, and completely switch off the motor when it is not in use
  SET_TMC_FIELD STEPPER=extruder FIELD=IHOLD VALUE=0
  SET_TMC_FIELD STEPPER=extruder FIELD=freewheel VALUE=1
  # Set the max expected velocity to a value such that we are unlikely to switch to fullstepping except during a very fast retraction or prime
  SET_TMC_FIELD STEPPER=extruder FIELD=THIGH VELOCITY=50
  # Use CoolStep, but we need a certain step frequency for it to work
  SET_TMC_FIELD STEPPER=extruder FIELD=TCOOLTHRS VALUE=4000
  # But do switch to PWM autotuning when at high flow
  SET_TMC_FIELD STEPPER=extruder FIELD=TPWMTHRS VELOCITY=1
  # Allow the motor to freewheel when not in use, means it runs cooler
  SET_TMC_FIELD STEPPER=extruder FIELD=freewheel VALUE=1
  # Set the temperature prewarning to something reasonable. Cosmetic, Klipper does nothing with this
  SET_TMC_FIELD STEPPER=extruder FIELD=OVERTEMPPREWARNING_VTH VALUE=2885 # 7.7 * 100 C + 2038
  # The following is absolutely critical: set the overvoltage snubber to a sensible voltage.
  # This should be set to about 0.8 V above your power supply's idle voltage.
  # Your PSU voltage can be read from the TMC 2240 by issuing a GCODE command:
  # DUMP_TMC stepper=extruder register=ADC_VSUPPLY_AIN
  # The voltage is the value of adc_vsupply multiplied by 0.009732
  # It is also possible to use adc_vsupply + 82 here, which works out to be the same.
  {% set v = 2570 %}
  SET_TMC_FIELD STEPPER=extruder FIELD=OVERVOLTAGE_VTH VALUE={ v }
  M118 Configured Extruder Driver



# ## ADXL345
# [adxl345]
# cs_pin: can0:ADXL_CS
# spi_software_sclk_pin: can0:ADXL_SCLK
# spi_software_mosi_pin: can0:ADXL_MOSI
# spi_software_miso_pin: can0:ADXL_MISO
# axes_map: x,y,z

# [resonance_tester]
# accel_chip: adxl345
# probe_points:
#     175,175,20  # an example for a 350mm printer

## PT100
# [temperature_sensor PT100]
# sensor_type: MAX31865
# sensor_pin: can0:PT100_CS
# spi_bus: spi1
# min_temp: -50
# max_temp: 350
# rtd_reference_r: 430

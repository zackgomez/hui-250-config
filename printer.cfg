# This file contains common pin mappings for the BigTreeTech Octopus V1.
# To use this config, the firmware should be compiled for the STM32F446 with a "32KiB bootloader"
# Enable "extra low-level configuration options" and select the "12MHz crystal" as clock reference

# after running "make", copy the generated "klipper/out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the OctoPus with that SD card.

# See docs/Config_Reference.md for a description of parameters.

## Voron Design VORON2 250/300/350mm BigTreeTech OctoPus V1 TMC2209 UART config

## *** THINGS TO CHANGE/CHECK: ***
## MCU paths                            [mcu] section
## Thermistor types                     [extruder] and [heater_bed] sections - See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types
## Z Endstop Switch location            [safe_z_home] section
## Homing end position                  [gcode_macro G32] section
## Z Endstop Switch  offset for Z0      [stepper_z] section
## Probe points                         [quad_gantry_level] section
## Min & Max gantry corner postions     [quad_gantry_level] section
## PID tune                             [extruder] and [heater_bed] sections
## Probe pin                            [probe] section
## Fine tune E steps                    [extruder] section

[mcu]
##  Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
##--------------------------------------------------------------------
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_2F0009001250335331383820-if00
restart_method: command
##--------------------------------------------------------------------

# [include adxl.cfg]

[printer]
kinematics: corexy
max_velocity: 450  
max_accel: 5000             #Max 4000
max_z_velocity: 20          #Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 350
square_corner_velocity: 5.0

[exclude_object]

[bed_mesh]
speed: 300
horizontal_move_z: 10

mesh_min: 40, 40
mesh_max: 210,210

fade_start: 0.6
fade_end: 10.0
probe_count: 3,3 # Values should be odd, so one point is directly at bed center
algorithm: bicubic

# [include timelapse.cfg]

[respond]
default_type: echo
#   Sets the default prefix of the "M118" and "RESPOND" output to one
#   of the following:
#       echo: "echo: " (This is the default)
#       command: "// "
#       error: "!! "
default_prefix: echo:
#   Directly sets the default prefix. If present, this value will
#   override the "default_type".

#####################################################################
#   X/Y Stepper Settings
#####################################################################

##  B Stepper - Left
##  Connected to MOTOR_0
##  Endstop connected to DIAG_0
[stepper_x]
step_pin: PG0
dir_pin: PG1
enable_pin: !PF15
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: tmc2209_stepper_x:virtual_endstop
position_min: 0
##--------------------------------------------------------------------

position_endstop: 250
position_max: 250

##--------------------------------------------------------------------
homing_speed: 20   #Max 100
homing_retract_dist: 0
homing_positive_dir: true

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_x]
uart_pin: PD11
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0
diag_pin: ^PG9
driver_SGTHRS: 60

##  A Stepper - Right
##  Connected to MOTOR_1
##  Endstop connected to DIAG_1
[stepper_y]
step_pin: PF13
dir_pin: PF12
enable_pin: !PF14
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: tmc2209_stepper_y:virtual_endstop
position_min: 0
##--------------------------------------------------------------------

position_endstop: 250
position_max: 250

##--------------------------------------------------------------------
homing_speed: 20  #Max 100
homing_retract_dist: 0
homing_positive_dir: true

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_y]
uart_pin: PC4
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0
diag_pin: ^PG6 # use the same pin that was previously the endstop_pin!
driver_SGTHRS: 75
 
#####################################################################
#   Z Stepper Settings
#####################################################################

## Z0 Stepper - Front Left
##  Connected to MOTOR_2
##  Endstop connected to DIAG_2
[stepper_z]
step_pin: PF11
dir_pin: PG3
enable_pin: !PG5
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32
# endstop_pin: PG10
endstop_pin: probe:z_virtual_endstop
##  Z-position of nozzle (in mm) to z-endstop trigger point relative to print surface (Z0)
##  (+) value = endstop above Z0, (-) value = endstop below
##  Increasing position_endstop brings nozzle closer to the bed
##  After you run Z_ENDSTOP_CALIBRATE, position_endstop will be stored at the very end of your config
# position_endstop: -0.5
##--------------------------------------------------------------------

position_max: 210

##--------------------------------------------------------------------
position_min: -5
homing_speed: 8
second_homing_speed: 3
homing_retract_dist: 3

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z]
uart_pin: PC6
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##  Z1 Stepper - Rear Left
##  Connected to MOTOR_3
[stepper_z1]
step_pin: PG4
dir_pin: !PC1
enable_pin: !PA0
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z1]
uart_pin: PC7
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##  Z2 Stepper - Rear Right
##  Connected to MOTOR_4
[stepper_z2]
step_pin: PF9
dir_pin: PF10
enable_pin: !PG2
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z2]
uart_pin: PF2
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##  Z3 Stepper - Front Right
##  Connected to MOTOR_5
[stepper_z3]
step_pin: PC13
dir_pin: !PF0
enable_pin: !PF1
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z3]
uart_pin: PE4
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0


#####################################################################
#   Bed Heater
#####################################################################

##  SSR Pin - HE1
##  Thermistor - TB
[heater_bed]
##  Uncomment the following line if using the default SSR wiring from the docs site
heater_pin: PA3
##  Other wiring guides may use BED_OUT to control the SSR. Uncomment the following line for those cases
#heater_pin: PA1
## Check what thermistor type you have. See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types.
## Use "Generic 3950" for Keenovo heaters
sensor_type: NTC 100K MGB18-104F39050L32
sensor_pin: PF3
##  Adjust Max Power so your heater doesn't warp your bed. Rule of thumb is 0.4 watts / cm^2 .
max_power: 0.6
min_temp: 0
max_temp: 120
#control: pid
#pid_kp: 58.437
#pid_ki: 2.347
#pid_kd: 363.769

#####################################################################
#   Chamber Thermistor
#####################################################################

[temperature_sensor chamber]
sensor_type: Generic 3950
sensor_pin: PF4


#####################################################################
#   Probe
#####################################################################

##  This probe is not used for Z height, only Quad Gantry Leveling
[probe]
pin: ^can0:PROBE_TOUCH
x_offset: 0
y_offset: 0
#z_offset: 2.202

speed: 5
samples: 5
sample_retract_dist: 2
lift_speed: 10
samples_result: median
samples_tolerance: 0.02
samples_tolerance_retries: 5

activate_gcode:
    {% set PROBE_TEMP = 150 %}
    {% set MAX_TEMP = PROBE_TEMP + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{ PROBE_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}

#####################################################################
#   Fan Control
#####################################################################


##  Controller fan - FAN2
[controller_fan underbody_fan]
pin: PE5
kick_start_time: 0.5
max_power: 0.2
heater: heater_bed

##  Nevermore Blowers fan - FAN3
# [fan_generic nevermore_blowers]
[heater_fan nevermore_blowers]
pin: PA8
max_power: 1.0
shutdown_speed: 0.0
kick_start_time: 5.0
heater: heater_bed
heater_temp: 65
fan_speed: 1.0

# [fan_generic bed_blowers]
# pin: PD13
# max_power: 0.5
# # shutdown_speed: 0.0
# # min_temp: 65
# # max_temp: 300
# kick_start_time: 5.0
# # heater: heater_bed
# # heater_temp: 65
# # fan_speed: 1.0


#####################################################################
#   LED Control
#####################################################################

## Daylight on a Stick
[output_pin chamber_light]
pin: PD13
pwm: true
cycle_time: 0.01
shutdown_value: 0
value: 0

## Chamber Lighting - HE2 Connector (Optional)
#[output_pin caselight]
#pin: PB10
#pwm:true
#shutdown_value: 0
#value:1
#cycle_time: 0.01

#####################################################################
#   Homing and Gantry Adjustment Routines
#####################################################################

[idle_timeout]
timeout: 1800

[firmware_retraction]
retract_length: 0.75
retract_speed: 50
unretract_speed: 30

##  Use QUAD_GANTRY_LEVEL to level a gantry.
##  Min & Max gantry corners - measure from nozzle at MIN (0,0) and 
##  MAX (250, 250), (300,300), or (350,350) depending on your printer size
##  to respective belt positions
[quad_gantry_level]
speed: 200
horizontal_move_z: 10
retries: 5
retry_tolerance: 0.0075
max_adjust: 10

#--------------------------------------------------------------------
##  Gantry Corners for 250mm Build
gantry_corners:
   -60,-10
   310, 320
#  Probe points
points:
   50,25
   50,175
   200,175
   200,25

[homing_override]
axes: xyz
gcode:
  {% set th = printer.toolhead %}
  {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}

  {% if home_all or 'X' in params %}
    _HOME_X
  {% endif %}
  
  {% if home_all or 'Y' in params %}
    _HOME_Y
  {% endif %}
  
  {% if home_all or 'Z' in params %}
    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} F9000
    G28 Z
    G1 Z10
  {% endif %}


########################################
# Filament Sensor
########################################
[filament_motion_sensor SFS_T0]
detection_length: 10.00 ; This can be adjusted to your desired level of sensitivity. 10 is a recomended value to prevent flow dropoff false triggers.
extruder: extruder
switch_pin: ^PG12
pause_on_runout: False ; This can be set to false to debug false positives putting the sensor in "monitor mode". The printer will not pause but it will run the runout_gcode below. 
event_delay: 3.0
pause_delay: 0.5
runout_gcode:
    M117 Runout Detected!


[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration: 1
gcode:
    SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0

########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<5V>

#####################################################################
#   Displays
#####################################################################

#  mini12864 LCD Display
[display]
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
contrast: 63
spi_software_miso_pin: EXP2_1
spi_software_mosi_pin: EXP2_6
spi_software_sclk_pin: EXP2_2

[output_pin beeper]
pin: EXP1_1
value: 0
shutdown_value: 0
pwm: True
cycle_time: 0.0005 ; Default beeper tone in kHz. 1 / 0.0005 = 2000Hz (2kHz)

#  To control Neopixel RGB in mini12864 display
[neopixel btt_mini12864]
pin: EXP1_6
chain_count: 3
initial_RED: 0.176 # 54
initial_GREEN: 0.055 # 14
initial_BLUE: 0.0
color_order: RGB

#  Set RGB values on boot up for each Neopixel. 
#  Index 1 = display, Index 2 and 3 = Knob
[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
       SET_LED LED=btt_mini12864 RED=0.176 GREEN=0.055 BLUE=0 INDEX=1 TRANSMIT=0
       SET_LED LED=btt_mini12864 RED=0.176 GREEN=0.055 BLUE=0 INDEX=2 TRANSMIT=0
       SET_LED LED=btt_mini12864 RED=0.176 GREEN=0.055 BLUE=0 INDEX=3 


## RGB toolhead
[neopixel my_neopixel]
pin: can0:RGBLED
chain_count: 3
color_order: GRB
initial_RED: 0.0
initial_GREEN: 0.0
initial_BLUE: 0.0

#--------------------------------------------------------------------

[include mainsail.cfg]
[include toolhead_btt_ebbcan_G0B1_v1.2.sb2209.cfg]

[include KAMP_Settings.cfg]

[include gcode_custom.cfg]
[include menu_custom.cfg]


#####################################################################
#   Macros
#####################################################################

[gcode_macro G32]
gcode:
    {% set th = printer.toolhead %}
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    _CG28
    QUAD_GANTRY_LEVEL
    G0 X{(th.axis_maximum.x - 10)} Y{th.axis_maximum.y - 10} Z5 F3000
    G28
    RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro _CG32]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes or printer.quad_gantry_level.applied == False %}
      G32
    {% endif %}

[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro TOGGLE_FAST_MODE]
gcode:
  {% if printer['gcode_macro PRINT_START'].fast_mode %}
    M118 Entering Regular Mode
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=fast_mode VALUE=0
  {% else %}
    M118 Entering Fast Mode
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=fast_mode VALUE=1
  {% endif %}

[gcode_macro PRINT_START]
variable_fast_mode: 0
gcode:
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set FAST_MODE = params.FAST_MODE|default(fast_mode)|int %}
    M117 ET {EXTRUDER_TEMP} BT {BED_TEMP} 
    M118 Extruder Temp {EXTRUDER_TEMP} & Bed_Temp {BED_TEMP} from print file

    M140 S{BED_TEMP}               ;start bed heating

    _status_startup

    {% if FAST_MODE != 0 %}
      M118 Fast Startup

      {% if printer.quad_gantry_level.applied == False %}
        M109 S{150}
        M190 S{BED_TEMP}
      {% endif %}

      _CG32
    {% else %}
      M118 Standard Startup

      M109 S{150}
      M190 S{BED_TEMP}

      G32                            ; home all axes'
      BED_MESH_CALIBRATE
    {% endif %}

    G90                            ; absolute positioning
    G1 Z5 F3000                   ; move nozzle away from bed

    M104 S{EXTRUDER_TEMP}          ; set extrusion temp
    M190 S{BED_TEMP}               ; ensure bed is up to temp before moving on
    M109 S{EXTRUDER_TEMP}          ; set & wait for nozzle to reach extrusion temp

    SFS_ENABLE

    PURGE_AND_WIPE_NOZZLE

    # VORON_PURGE

    _status_printing
   

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder

    SFS_DISABLE
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G1 E-18.0 F1800                          ; retract filament
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    TURN_OFF_HEATERS
    
    BED_MESH_CLEAR

    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

    _status_idle

[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}    
    {% set NEEDS_CURRENT_ADJUSTMENT = HOME_CURRENT != RUN_CURRENT_X or HOME_CURRENT != RUN_CURRENT_Y %}

    {% if NEEDS_CURRENT_ADJUSTMENT %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
    {% endif %}

    # Home
    G28 X
    # Move away
    G91
    G1 X-10 F1200
    
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    {% if NEEDS_CURRENT_ADJUSTMENT %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
    {% endif %}

[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    {% set NEEDS_CURRENT_ADJUSTMENT = HOME_CURRENT != RUN_CURRENT_X or HOME_CURRENT != RUN_CURRENT_Y %}

    {% if NEEDS_CURRENT_ADJUSTMENT %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
    {% endif %}

    # Home
    G28 Y
    # Move away
    G91
    G1 Y-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    {% if NEEDS_CURRENT_ADJUSTMENT %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
    {% endif %}

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 35.750
#*# pid_ki = 0.942
#*# pid_kd = 339.182
#*#
#*# [probe]
#*# z_offset = -0.260
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 23.861
#*# pid_ki = 2.566
#*# pid_kd = 55.478
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	-0.021250, 0.015000, -0.013750
#*# 	-0.030000, 0.018750, -0.030000
#*# 	-0.042500, -0.005000, -0.022500
#*# x_count = 3
#*# y_count = 3
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = lagrange
#*# tension = 0.2
#*# min_x = 40.79
#*# max_x = 209.85
#*# min_y = 40.38
#*# max_y = 209.62
#*#
#*# [input_shaper]
#*# shaper_type_x = mzv
#*# shaper_freq_x = 58.4
#*# shaper_type_y = 2hump_ei
#*# shaper_freq_y = 58.0
